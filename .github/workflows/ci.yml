# ===========================================
# Grocery POS - CI/CD Pipeline
# ===========================================

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================
  # Setup and Validation
  # ===========================================
  setup:
    name: Setup & Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    outputs:
      node-version: ${{ env.NODE_VERSION }}
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Verify package integrity
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: Check deployment conditions
        id: check-deploy
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # ===========================================
  # Code Quality Checks
  # ===========================================
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run Prettier check
        run: npm run format:check
        
      - name: Run TypeScript type check
        run: npm run type-check
        
      - name: Upload lint results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: |
            eslint-report.json
            prettier-report.txt
          retention-days: 7

  # ===========================================
  # Unit & Integration Tests (Smoke Tests)
  # ===========================================
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run smoke tests
        run: npm run qa:smoke
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  # ===========================================
  # Build Application
  # ===========================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, lint-and-type-check]
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Build application
        run: npm run build:prod
        env:
          VITE_APP_ENV: production
          VITE_APP_NAME: Grocery POS
          VITE_CURRENCY: LKR
          
      - name: Verify build output
        run: |
          ls -la dist/
          test -f dist/index.html
          test -d dist/assets
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # ===========================================
  # End-to-End Tests
  # ===========================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Install Playwright browsers
        run: npm run e2e:install
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          
      - name: Start production server
        run: |
          npm run serve:prod &
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8080/health > /dev/null 2>&1; do sleep 2; done'
        env:
          VITE_APP_ENV: production
          
      - name: Run health check
        run: npm run release:check
        
      - name: Prepare test data
        run: npm run qa:reset
        
      - name: Run E2E tests
        run: npm run qa:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:8080
          
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7
          
      - name: Upload E2E videos
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-videos
          path: test-results/videos/
          retention-days: 7

  # ===========================================
  # Security Scanning
  # ===========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ===========================================
  # Docker Build & Test
  # ===========================================
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          
      - name: Build Docker image
        run: |
          docker build -t grocery-pos:test .
          
      - name: Test Docker image
        run: |
          # Start container
          docker run -d --name grocery-pos-test -p 8080:80 grocery-pos:test
          
          # Wait for container to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8080/health > /dev/null 2>&1; do sleep 2; done'
          
          # Test health endpoint
          curl -f http://localhost:8080/health
          
          # Test main page
          curl -f http://localhost:8080/ | grep -q "Grocery POS"
          
          # Stop container
          docker stop grocery-pos-test
          docker rm grocery-pos-test
          
      - name: Save Docker image
        if: needs.setup.outputs.should-deploy == 'true'
        run: |
          docker save grocery-pos:test | gzip > grocery-pos-image.tar.gz
          
      - name: Upload Docker image
        if: needs.setup.outputs.should-deploy == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: grocery-pos-image.tar.gz
          retention-days: 7

  # ===========================================
  # Deploy (Tags and Main Branch)
  # ===========================================
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [setup, lint-and-type-check, smoke-tests, e2e-tests, docker-build, security-scan]
    if: needs.setup.outputs.should-deploy == 'true' && github.event.pull_request.draft == false
    
    environment:
      name: ${{ startsWith(github.ref, 'refs/tags/') && 'production' || 'staging' }}
      url: ${{ startsWith(github.ref, 'refs/tags/') && 'https://grocery-pos.example.com' || 'https://staging.grocery-pos.example.com' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
          
      - name: Load Docker image
        run: |
          docker load < grocery-pos-image.tar.gz
          
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            
      - name: Tag and push Docker image
        run: |
          # Tag image with metadata
          for tag in ${{ steps.meta.outputs.tags }}; do
            docker tag grocery-pos:test $tag
            docker push $tag
          done
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            
            See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.
            
            ## Docker Image
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ## Quick Start
            
            ```bash
            docker run -p 8080:80 --env-file .env ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  # ===========================================
  # Cleanup
  # ===========================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Keep artifacts for failed runs
            if (context.job.status === 'success') {
              for (const artifact of artifacts.data.artifacts) {
                if (artifact.name.includes('test-results') || artifact.name.includes('videos')) {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id,
                  });
                }
              }
            }

# ===========================================
# Workflow Configuration Notes
# ===========================================
#
# This workflow provides:
# 1. Comprehensive CI/CD pipeline
# 2. Parallel job execution for speed
# 3. Artifact management and cleanup
# 4. Security scanning with CodeQL
# 5. Docker build and test
# 6. Automated deployment on tags
# 7. GitHub Releases creation
#
# Required Secrets:
# - GITHUB_TOKEN (automatically provided)
# - Additional secrets for deployment targets
#
# Branch Protection Rules:
# - Require status checks to pass
# - Require branches to be up to date
# - Require review from code owners
# - Restrict pushes to main branch
#
# ===========================================








