# ===========================================
# Nginx Configuration for Grocery POS
# ===========================================

server {
    listen ${NGINX_PORT};
    server_name localhost;
    
    # Root directory
    root /usr/share/nginx/html;
    index index.html;
    
    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval';
        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
        font-src 'self' https://fonts.gstatic.com data:;
        img-src 'self' data: blob: https:;
        connect-src 'self' https: wss: ws:;
        media-src 'self';
        object-src 'none';
        base-uri 'self';
        form-action 'self';
        frame-ancestors 'none';
        upgrade-insecure-requests;
    " always;
    
    # MIME type configuration
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff always;
    }
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Main application route (SPA fallback)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Security headers for HTML
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Prevent caching of HTML files
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"ok","service":"grocery-pos","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json always;
        add_header X-Content-Type-Options nosniff always;
    }
    
    # API routes (if backend is added later)
    location /api/ {
        # Placeholder for future API proxy
        return 404 '{"error":"API not implemented"}';
        add_header Content-Type application/json always;
    }
    
    # Robots.txt
    location = /robots.txt {
        return 200 "User-agent: *\nDisallow: /\n";
        add_header Content-Type text/plain;
    }
    
    # Security.txt (RFC 9116)
    location = /.well-known/security.txt {
        return 200 "Contact: security@example.com\nExpires: 2025-12-31T23:59:59.000Z\n";
        add_header Content-Type text/plain;
    }
    
    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|config|log|sql|md)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block access to source maps in production
    location ~ \.map$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Favicon handling
    location = /favicon.ico {
        log_not_found off;
        access_log off;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Service worker (no cache)
    location = /sw.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Manifest file
    location = /manifest.json {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Content-Type application/json;
    }
    
    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Logging configuration
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;
}

# ===========================================
# Performance Tuning
# ===========================================

# Worker processes (set via environment variable)
worker_processes ${NGINX_WORKER_PROCESSES};

# Worker connections (set via environment variable)  
events {
    worker_connections ${NGINX_WORKER_CONNECTIONS};
    use epoll;
    multi_accept on;
}

# HTTP configuration
http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    # Buffer sizes
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 2 1k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;
    
    # Rate limiting (uncomment if needed)
    # limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    # limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # SSL configuration (for HTTPS deployment)
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
}

# ===========================================
# Usage Notes
# ===========================================
#
# This configuration provides:
# 1. SPA routing with fallback to index.html
# 2. Security headers for XSS and clickjacking protection
# 3. Gzip compression for better performance
# 4. Caching policies for static assets
# 5. Health check endpoint at /health
# 6. Rate limiting capabilities (commented out)
# 7. SSL/TLS configuration (commented out)
#
# For HTTPS deployment:
# 1. Uncomment SSL configuration section
# 2. Add SSL certificate files
# 3. Update listen directive to 443 ssl
# 4. Add redirect from HTTP to HTTPS
#
# For production deployment:
# 1. Review and adjust rate limiting
# 2. Configure proper SSL certificates
# 3. Set up log rotation
# 4. Monitor performance metrics
# 5. Regularly update security headers
#
# ===========================================








